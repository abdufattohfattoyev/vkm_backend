from django.db import models
from django.utils.text import slugify


class MusicArtist(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name="Ism")
    slug = models.SlugField(max_length=100, unique=True, blank=True, verbose_name="Slug")
    bio = models.TextField(blank=True, verbose_name="Biografiya")
    image = models.ImageField(upload_to='artists/', null=True, blank=True, verbose_name="Rasm")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Yaratilgan vaqt")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Yangilangan vaqt")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['name']
        verbose_name = 'Artist'
        verbose_name_plural = 'Artistlar'
        db_table = 'music_artists'


class Album(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name="Nomi")
    slug = models.SlugField(max_length=100, unique=True, blank=True, verbose_name="Slug")
    artist = models.ForeignKey(
        MusicArtist, on_delete=models.CASCADE, related_name='albums', verbose_name="Artist"
    )
    image = models.ImageField(upload_to='albums/', null=True, blank=True, verbose_name="Rasm")
    release_date = models.DateField(null=True, blank=True, verbose_name="Chiqarilgan sana")
    genre = models.CharField(max_length=50, blank=True, verbose_name="Janr")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Yaratilgan vaqt")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Yangilangan vaqt")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['name']
        verbose_name = 'Albom'
        verbose_name_plural = 'Albomlar'
        db_table = 'music_albums'


class Song(models.Model):
    name = models.CharField(max_length=100, verbose_name="Nomi")
    slug = models.SlugField(max_length=100, blank=True, verbose_name="Slug")
    album = models.ForeignKey(
        Album, on_delete=models.CASCADE, related_name='songs', verbose_name="Albom"
    )
    file = models.FileField(upload_to='songs/', null=False, blank=False, verbose_name="Musiqa fayli")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Yaratilgan vaqt")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Yangilangan vaqt")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['name']
        verbose_name = 'Qo‘shiq'
        verbose_name_plural = 'Qo‘shiqlar'
        db_table = 'music_songs'
        unique_together = [['name', 'album']]


class Playlist(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name="Nomi")
    slug = models.SlugField(max_length=100, unique=True, blank=True, verbose_name="Slug")
    image = models.ImageField(upload_to='playlists/', null=True, blank=True, verbose_name="Rasm")
    songs = models.ManyToManyField(Song, related_name='playlists', blank=True, verbose_name="Qo‘shiqlar")
    created_by = models.ForeignKey(
        'auth.User', on_delete=models.SET_NULL, null=True, related_name='playlists', verbose_name="Yaratuvchi"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Yaratilgan vaqt")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Yangilangan vaqt")

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['name']
        verbose_name = 'Pleylist'
        verbose_name_plural = 'Pleylistlar'
        db_table = 'music_playlists'